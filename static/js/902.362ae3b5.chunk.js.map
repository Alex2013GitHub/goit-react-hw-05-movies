{"version":3,"file":"static/js/902.362ae3b5.chunk.js","mappings":"2PAEaA,EAAOC,EAAAA,GAAAA,GAAH,uNAYJC,EAAQD,EAAAA,GAAAA,GAAH,qEAKLE,EAAWF,EAAAA,GAAAA,GAAH,4CAIRG,EAAMH,EAAAA,GAAAA,IAAH,2D,mBCgBhB,EAlCiB,SAAC,GAAc,IAAZI,EAAW,EAAXA,KAClB,OACE,SAACL,EAAD,UACGK,EAAKC,KAAI,YAAwD,IAArDC,EAAoD,EAApDA,GAAkBC,EAAkC,EAAhDC,aAA0BC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACzCC,EAAaJ,EACfK,EAAAA,GAAAA,QAAAA,OACEA,EAAAA,GAAAA,YAAAA,GACAL,GAEFM,EAEJ,OACE,2BACE,SAACZ,EAAD,UAAQQ,KACR,SAACN,EAAD,CAAKW,IAAKH,EAAYI,IAAI,MAC1B,SAACb,EAAD,UAAWQ,MAHJJ,EAMZ,KAGN,E,UCmBD,EAvCa,WACX,OAAwBU,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKnB,KAAjB,GACvC,GAAE,CAACc,IAECd,EAcAA,EAAKoB,QAWR,+BACE,SAAC,EAAD,CAAUpB,KAAMA,OAVhB,+BACE,0BAAI,2BACuB,KACzB,iBAAMqB,MAAO,CAAEC,MAAO,cAAtB,SAAsC,SAAW,wBAjBrD,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CAAC,EACfC,aAAa,uBACbC,YAAY,OACZC,SAAS,aAoBhB,C,2NCxCYrB,EAAgB,CAC3BsB,QAAS,6BACTC,YAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAGzDC,EAAS,mCAAG,sGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,MAC1CC,EAAS,CACbC,QAAS,+BACTC,OAAQ,CACNC,QAXU,mCAYVJ,MAAAA,IALY,SASOK,EAAAA,EAAAA,IAAA,UAAaP,GAAb,OAAyBC,GAAcE,GAT9C,uBASRjB,EATQ,EASRA,KATQ,kBAUTA,GAVS,2CAAH,sDAaFsB,EAAY,WACvB,IAKMP,EAAa,IAAIQ,OAHL,QAGuB,IAFtB,QAInB,OAAOV,EAAU,CAAEC,UAPD,YAOYC,WAAAA,GAC/B,EAEYS,EAAe,SAAAzC,GAC1B,IACMgC,EAAU,WAAOhC,GAEvB,OAAO8B,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,EAEYU,EAAkB,SAAAT,GAI7B,OAAOH,EAAU,CAAEC,UAHD,UAGYC,WAFd,SAE0BC,MAAAA,GAC3C,EAEYlB,EAAsB,SAAAf,GACjC,IACMgC,EAAU,WAAOhC,EAAP,YAEhB,OAAO8B,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,EAEYW,EAAsB,SAAA3C,GACjC,IACMgC,EAAU,WAAOhC,EAAP,YAEhB,OAAO8B,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,C","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","components/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 185px);\n  gap: 16px;\n  justify-content: center;\n\n  padding-top: 16px;\n  margin-top: 8px;\n\n  border-top: 1px solid #cccccc;\n`;\n\nexport const Title = styled.h4`\n  color: blueviolet;\n  margin-bottom: 4px;\n`;\n\nexport const SubTitle = styled.h4`\n  margin-top: 4px;\n`;\n\nexport const Img = styled.img`\n  width: 133px;\n  height: 200px;\n`;\n","import { PropTypes } from 'prop-types';\nimport { POSTER_CONFIG } from 'services/Api';\nimport { List, Title, SubTitle, Img } from './CastList.styled';\nimport defaultImage from 'default-movie-768x1129.jpg';\n\nconst CastList = ({ cast }) => {\n  return (\n    <List>\n      {cast.map(({ id, profile_path: posterPath, name, character }) => {\n        const castPoster = posterPath\n          ? POSTER_CONFIG.baseUrl.concat(\n              POSTER_CONFIG.posterSizes[0],\n              posterPath\n            )\n          : defaultImage;\n\n        return (\n          <li key={id}>\n            <Title>{name}</Title>\n            <Img src={castPoster} alt=\"\" />\n            <SubTitle>{character}</SubTitle>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCreditsById } from 'services/Api';\nimport CastList from './CastList';\nimport { ProgressBar } from 'react-loader-spinner';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCreditsById(movieId).then(data => setCast(data.cast));\n  }, [movieId]);\n\n  if (!cast) {\n    return (\n      <ProgressBar\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"navy\"\n        barColor=\"orangered\"\n      />\n    );\n  }\n\n  if (!cast.length) {\n    return (\n      <>\n        <h3>\n          Oop's! We don't have any{' '}\n          <span style={{ color: 'blueviolet' }}>cast</span> for this movie\n        </h3>\n      </>\n    );\n  }\n  return (\n    <>\n      <CastList cast={cast} />\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'b8e97797a63a229ee5b42773102304ac';\n\nexport const POSTER_CONFIG = {\n  baseUrl: 'http://image.tmdb.org/t/p/',\n  posterSizes: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\n};\n\nconst getMovies = async ({ queryType, pathParams, query }) => {\n  const config = {\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  };\n\n  const { data } = await axios.get(`${queryType}${pathParams}`, config);\n  return data;\n};\n\nexport const getTrends = () => {\n  const queryType = '/trending';\n\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n\n  const pathParams = '/'.concat(mediaType, '/', timeWindow);\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieByQuery = query => {\n  const queryType = '/search';\n  const pathParams = `/movie`;\n\n  return getMovies({ queryType, pathParams, query });\n};\n\nexport const getMovieCreditsById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}/credits`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieReviewsById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}/reviews`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getApiConfig = () => {\n  const pathParams = '';\n\n  return getMovies({ queryType: '/configuration', pathParams });\n};\n"],"names":["List","styled","Title","SubTitle","Img","cast","map","id","posterPath","profile_path","name","character","castPoster","POSTER_CONFIG","defaultImage","src","alt","useState","setCast","movieId","useParams","useEffect","getMovieCreditsById","then","data","length","style","color","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","baseUrl","posterSizes","getMovies","queryType","pathParams","query","config","baseURL","params","api_key","axios","getTrends","concat","getMovieById","getMovieByQuery","getMovieReviewsById"],"sourceRoot":""}