{"version":3,"file":"static/js/126.37f2657b.chunk.js","mappings":"6PAEaA,EAAOC,EAAAA,GAAAA,GAAH,sGAOJC,EAASD,EAAAA,GAAAA,GAAH,8EAMNE,EAASF,EAAAA,GAAAA,GAAH,sBAENG,EAAcH,EAAAA,GAAAA,KAAH,2CAIXI,EAAOJ,EAAAA,GAAAA,EAAH,4F,SCDjB,EAlBoB,SAAC,GAAiB,IAAfK,EAAc,EAAdA,QACrB,OACE,SAACN,EAAD,UACGM,EAAQC,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,UAACR,EAAD,YACE,UAACC,EAAD,YACE,SAACC,EAAD,UAAa,aACZK,MAEH,SAACJ,EAAD,UAAOK,MALIF,EAQhB,KAGN,E,UC2BD,EAvCgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,MAAvC,eAAOL,EAAP,KAAgBM,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAI,OAAIN,EAAWM,EAAKZ,QAApB,GACvC,GAAE,CAACO,IAECP,EAcAA,EAAQa,QAWX,+BACE,SAAC,EAAD,CAAab,QAASA,OAVtB,+BACE,0BAAI,2BACuB,KACzB,iBAAMc,MAAO,CAAEC,MAAO,cAAtB,SAAsC,YAAc,wBAjBxD,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,UAAU,uBACVC,aAAc,CAAC,EACfC,aAAa,uBACbC,YAAY,OACZC,SAAS,aAoBhB,C,2NCxCYC,EAAgB,CAC3BC,QAAS,6BACTC,YAAa,CAAC,MAAO,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,aAGzDC,EAAS,mCAAG,sGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,MAC1CC,EAAS,CACbC,QAAS,+BACTC,OAAQ,CACNC,QAXU,mCAYVJ,MAAAA,IALY,SASOK,EAAAA,EAAAA,IAAA,UAAaP,GAAb,OAAyBC,GAAcE,GAT9C,uBASRlB,EATQ,EASRA,KATQ,kBAUTA,GAVS,2CAAH,sDAaFuB,EAAY,WACvB,IAKMP,EAAa,IAAIQ,OAHL,QAGuB,IAFtB,QAInB,OAAOV,EAAU,CAAEC,UAPD,YAOYC,WAAAA,GAC/B,EAEYS,EAAe,SAAAnC,GAC1B,IACM0B,EAAU,WAAO1B,GAEvB,OAAOwB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,EAEYU,EAAkB,SAAAT,GAI7B,OAAOH,EAAU,CAAEC,UAHD,UAGYC,WAFd,SAE0BC,MAAAA,GAC3C,EAEYU,EAAsB,SAAArC,GACjC,IACM0B,EAAU,WAAO1B,EAAP,YAEhB,OAAOwB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,EAEYlB,EAAsB,SAAAR,GACjC,IACM0B,EAAU,WAAO1B,EAAP,YAEhB,OAAOwB,EAAU,CAAEC,UAHD,SAGYC,WAAAA,GAC/B,C","sources":["components/ReviewsList/ReviewsList.styled.js","components/ReviewsList/ReviewsList.jsx","components/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-top: 16px;\n  margin-top: 8px;\n\n  border-top: 1px solid #cccccc;\n`;\n\nexport const Review = styled.li`\n  :not(:first-of-type) {\n    margin-top: 24px;\n  }\n`;\n\nexport const Author = styled.h3``;\n\nexport const AuthorTitle = styled.span`\n  color: #707070;\n`;\n\nexport const Text = styled.p`\n  margin-top: 16px;\n  padding-left: 16px;\n  padding-right: 16px;\n`;","import { List, Author, AuthorTitle, Text, Review } from './ReviewsList.styled';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <List>\n      {reviews.map(({ id, author, content }) => {\n        return (\n          <Review key={id}>\n            <Author>\n              <AuthorTitle>Author: </AuthorTitle>\n              {author}\n            </Author>\n            <Text>{content}</Text>\n          </Review>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default ReviewsList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviewsById } from 'services/Api';\nimport ReviewsList from './ReviewsList';\nimport { ProgressBar } from 'react-loader-spinner';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviewsById(movieId).then(data => setReviews(data.reviews));\n  }, [movieId]);\n\n  if (!reviews) {\n    return (\n      <ProgressBar\n        height=\"80\"\n        width=\"80\"\n        ariaLabel=\"progress-bar-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"progress-bar-wrapper\"\n        borderColor=\"navy\"\n        barColor=\"orangered\"\n      />\n    );\n  }\n\n  if (!reviews.length) {\n    return (\n      <>\n        <h3>\n          Oop's! We don't have any{' '}\n          <span style={{ color: 'blueviolet' }}>reviews</span> for this movie\n        </h3>\n      </>\n    );\n  }\n  return (\n    <>\n      <ReviewsList reviews={reviews} />\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst API_KEY = 'b8e97797a63a229ee5b42773102304ac';\n\nexport const POSTER_CONFIG = {\n  baseUrl: 'http://image.tmdb.org/t/p/',\n  posterSizes: ['w92', 'w154', 'w185', 'w342', 'w500', 'w780', 'original'],\n};\n\nconst getMovies = async ({ queryType, pathParams, query }) => {\n  const config = {\n    baseURL: 'https://api.themoviedb.org/3',\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n  };\n\n  const { data } = await axios.get(`${queryType}${pathParams}`, config);\n  return data;\n};\n\nexport const getTrends = () => {\n  const queryType = '/trending';\n\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n\n  const pathParams = '/'.concat(mediaType, '/', timeWindow);\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieByQuery = query => {\n  const queryType = '/search';\n  const pathParams = `/movie`;\n\n  return getMovies({ queryType, pathParams, query });\n};\n\nexport const getMovieCreditsById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}/credits`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getMovieReviewsById = id => {\n  const queryType = '/movie';\n  const pathParams = `/${id}/reviews`;\n\n  return getMovies({ queryType, pathParams });\n};\n\nexport const getApiConfig = () => {\n  const pathParams = '';\n\n  return getMovies({ queryType: '/configuration', pathParams });\n};\n"],"names":["List","styled","Review","Author","AuthorTitle","Text","reviews","map","id","author","content","useState","setReviews","movieId","useParams","useEffect","getMovieReviewsById","then","data","length","style","color","height","width","ariaLabel","wrapperStyle","wrapperClass","borderColor","barColor","POSTER_CONFIG","baseUrl","posterSizes","getMovies","queryType","pathParams","query","config","baseURL","params","api_key","axios","getTrends","concat","getMovieById","getMovieByQuery","getMovieCreditsById"],"sourceRoot":""}