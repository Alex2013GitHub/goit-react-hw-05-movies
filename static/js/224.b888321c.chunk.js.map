{"version":3,"file":"static/js/224.b888321c.chunk.js","mappings":"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","sources":["pages/EditorList/EditorList.styled.js","pages/EditorList/EditorList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.js","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: blue;\n    transition-delay: 0.25s;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 2px solid #191d1e;\n  font-weight: 600;\n  font-size: 16px;\n  margin-right: 10px;\n  width: 450px;\n\n  outline: none;\n\n  &:hover {\n    color: blue;\n    border: 2px solid blue;\n    transition-delay: 0.25s;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 2px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 16px;\n\n  &:hover {\n    color: blue;\n    border: 2px solid blue;\n    transition-delay: 0.25s;\n  }\n`;\n","import { useState } from 'react';\nimport { SearchForm, Input, Button } from './SearchForm.styled';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        placeholder=\"Search movie...\"\n        value={query}\n        onChange={handleInputChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </SearchForm>\n  );\n};\n\nForm.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import { useEffect, useState } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport Form from 'components/SearchForm/SearchForm';\nimport EditorList from 'pages/EditorList/EditorList';\nimport { fetchSearchByKeyword } from 'services/Api';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [queryMovie, setQueryMovie] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query') || '';\n\n    if (query !== queryMovie) {\n      setLoading(true);\n      setQueryMovie(query);\n\n      fetchSearchByKeyword(query)\n        .then(searchResults => {\n          setSearchFilms(searchResults);\n        })\n        .catch(error => {\n          console.error(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n  }, [searchParams, queryMovie]);\n\n  const handleSearch = query => {\n    setSearchParams({ query });\n  };\n\n  return (\n    <main>\n      <Form searchMovies={handleSearch} initialQuery={queryMovie} />\n      {loading && <Loader />}\n      {searchFilms.length < 0 && (\n        <p>There are no movies with this request. Please try again.</p>\n      )}\n      {searchFilms.length > 0 && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'b8e97797a63a229ee5b42773102304ac';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","Item","MovieLink","Link","films","location","useLocation","map","film","to","id","state","from","title","SearchForm","Input","Button","searchMovies","useState","query","setQuery","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","placeholder","value","onChange","target","searchFilms","setSearchFilms","loading","setLoading","queryMovie","setQueryMovie","useSearchParams","searchParams","setSearchParams","useEffect","get","fetchSearchByKeyword","then","searchResults","catch","error","console","finally","initialQuery","Loader","length","EditorList","axios","API_KEY","fetchTrending","response","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}